/**
 * Copyright (c) Moodle Pty Ltd.
 *
 * Moodle is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Moodle is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 */

const { existsSync } = require('fs');
const path = require('path');

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
/** @type {import('@docusaurus/plugin-content-docs/src/types').NormalizedSidebarItem} */
/** @type import('@site/src').ProjectSummaryData */

const Versions = require('../data/supportedVersions.json').versions;

const today = new Date();

const isSupported = (versionData) => {
    if (versionData.extendedsecurity) {
        return (new Date(versionData.extendedsecurity)) > today;
    }

    return (new Date(versionData.security)) > today;
};

module.exports = function getReleaseNotes() {
    const releaseNotes = {
        label: 'Releases',
        type: 'category',
        items: [],
        link: {
            type: 'doc',
            id: 'releases',
        },
    };

    const archivedVersions = [];

    Object.entries(Versions).forEach(([majorVersion, versionData]) => {
        const dirName = `releases/${majorVersion}`;

        if (!existsSync(path.resolve(__dirname, '../general/', dirName))) {
            return;
        }

        const getTitle = () => {
            if (versionData.isLTS) {
                return `Moodle ${majorVersion} (LTS)`;
            }

            return `Moodle ${majorVersion}`;
        };

        const thisRelease = {
            label: getTitle(),
            type: 'category',
            items: [
                {
                    type: 'autogenerated',
                    dirName,
                },
            ],
            link: {
                type: 'doc',
                id: `releases/${majorVersion}`,
            },
        };
        if (isSupported(versionData)) {
            releaseNotes.items.push(thisRelease);
        } else {
            archivedVersions.push(thisRelease);
        }
    });

    releaseNotes.items.push({
        label: 'Archive',
        type: 'category',
        items: archivedVersions,
    });

    return releaseNotes;
};
